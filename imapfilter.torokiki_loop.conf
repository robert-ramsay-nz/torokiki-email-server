--
--	Coding Notes:
--
--		- Even if you get something looping reliably, make sure 
--		  that it will deal with a network outage. ie check that 
--		  select_all()/is_new() will reconnect. 
--
--		- for the production environment also consider having 
--		  a script checking that the server is working, and have 
--		  it contact you when there is an error. ie check that 
--		  imapfilter is still looping correctly, and that perl 
--		  scripts are giving reasonable output.
--


---------------
--  Account  --
---------------

timecapsuletesting = IMAP {
	server = 'imap.googlemail.com',
	username = 'time.capsule.testing@gmail.com',
	password = 'porcorosso',
	ssl = 'ssl3',
}


---------------
--  Options  --
---------------

--options.timeout = 120
--options.subscribe = true


--------------------------
--  Mailbox processing  --
--------------------------

function exists(filename)
	local file = io.open(filename)
	if file then
		io.close(file)
		return true
	else
		return false
	end
end

function get_unique_filename()
	local filename
	repeat
		filename = string.format("message.%d", math.random(0,1000000) )
	until not exists(filename)

	return filename
end

function sleep(n)  -- seconds
	local t0 = os.clock()
	while os.clock() - t0 <= n 
	do 
	end
end


--messages = timecapsuletesting.INBOX:contain_subject('time-capsule')
--messages = timecapsuletesting.INBOX:match_subject('.*')

-- exist, unread, unseen = myaccount.mymailbox:check_status()

local loop_count = 0
local message_list
local messages
local bodies
local headers
while true
do
	--io.write("----------------")
	--io.write(loop_count)
	--io.write("\n")

	loop_count = loop_count+1

	message_list = nil
	timecapsuletesting.INBOX:check_status()
	--message_list = timecapsuletesting.INBOX:select_all()
	message_list = timecapsuletesting.INBOX:is_new()

	messages = nil
	bodies = nil
	headers = nil
	messages = nil
	messages = timecapsuletesting.INBOX:fetch_message(message_list)
	bodies = timecapsuletesting.INBOX:fetch_body(message_list)
	headers = timecapsuletesting.INBOX:fetch_header(message_list)

	--if nil then  
	if messages ~= nil then  

		for key,value in pairs(messages) 
		do 

			print("Processing email.")

			-- Save message
			local filename = get_unique_filename()
			io.write( string.format("processing new emails as: %s", filename) )
			local outfile = io.open(filename, "w")
			outfile:write(messages[key])
			io.close(outfile)
			io.write(" >")


			-- Process it.
			local cmd = string.format("./timecap_munge_message.pl %s", filename)
			local cmd_rtn = os.execute(cmd)
			io.write("*")

			-- Delete local copy.
			local cmd = string.format("rm -f %s", filename)
			local cmd_rtn = os.execute(cmd)
			io.write("d")

			------ Delete remote copy.
			----local message =  { value }
			--timecapsuletesting.INBOX:delete_messages(message)
			----timecapsuletesting.INBOX:mark_flagged(message)
			--io.write("D")
		end

		-- ?? This should be done on a per message basis after
		-- successfull processing.
		timecapsuletesting.INBOX:delete_messages(messages)
	end

	-- sleep(150)
	sleep(5)
end



------ + and, * or, - not
----         unseen = myaccount.myaccount:is_unseen()
----         larger = myaccount.mymailbox:is_larger(100000)
----         subject = myaccount.mymailbox:contain_subject(’test’)
----         messages = unseen + larger * subject
--
--status = pipe_to('cat -', fields)
--
----------------------------------
--
--     expunge
--             Normally, messages are marked for deletion and are actually
--             deleted when the mailbox is closed.  When this option is enabled,
--             messages are expunged immediately after being marked deleted.
--             This variable takes a boolean as a value.  Default is ‘‘true’’.
--
--
--     delete_messages(messages)
--             Deletes the messages (table).
--
--
--     mark_deleted(messages)
--             Marks messages (table) for later removal.
--
